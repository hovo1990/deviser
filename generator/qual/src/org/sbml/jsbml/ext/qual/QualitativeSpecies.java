# Generated by org.mangosdk.spi.processor.SpiProcessor (0.2.4)
# Sat, 9 Jul 2016 11:06:31 +0400
*
* (non-Javadoc)
* ----------------------------------------------------------------------------
* 1. The University of Tuebingen, Germany
* 2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
* 3. The California Institute of Technology, Pasadena, CA, USA
* 4. The University of California, San Diego, La Jolla, CA, USA
* 5. The Babraham Institute, Cambridge, UK
* @author Deviser
* @date $Date: $
* @param constant
* @param id
* @param initialLevel
* @param level
* @param maxLevel
* @param name
* @param orig the QualitativeSpecies instance to copy.
* @param version
* @return
* @return false
* @return the constant
* @return the initialLevel
* @return the maxLevel
* @return true
* @return {@code true} if the unset of the constant attribute was successful
* @return {@code true} if the unset of the initialLevel attribute was
* @return {@code true} if the unset of the maxLevel attribute was successful
* @see
* @see org.sbml.jsbml.CompartmentalizedSBase
* @see org.sbml.jsbml.NamedSBase
* @since 1.2
* @version $Rev: 2465 $
* Copyright (C) 2009-2016 jointly by the following organizations:
* Generated serial version identifier.
* This file is part of JSBML. Please visit <http://sbml.org/Software/JSBML>
* This library is free software; you can redistribute it and/or modify it
* and also available online as <http://sbml.org/Software/JSBML/License>.
* for the latest version of JSBML and more information about SBML.
* in the file named "LICENSE.txt" included with this software distribution
* see java.lang.Object
* successful
* the Free Software Foundation. A copy of the license agreement is provided
* under the terms of the GNU Lesser General Public License as published b
*/
+ constant + ", initialLevel = " + initialLevel + ", maxLevel = " +
/*
/* (non-Javadoc)
/* Assignment operator for QualitativeSpecies.
/* hashcode method for QualitativeSpecies.
/**
@Override
Boolean oldConstant = constant;
Boolean oldConstant = this.constant;
Integer oldInitialLevel = initialLevel;
Integer oldInitialLevel = this.initialLevel;
Integer oldMaxLevel = maxLevel;
Integer oldMaxLevel = this.maxLevel;
Model model = getModel();
QualitativeSpecies obj = (QualitativeSpecies) object;
String oldCompartment = this.compartment;
boolean equals = super.equals(object);
boolean isAttributeRead = super.readAttribute(attributeName, prefix, value);
compartment = null;
constant = null;
equals &= (obj.getCompartment() == getCompartment());
equals &= (obj.getConstant() == getConstant());
equals &= (obj.getInitialLevel() == getInitialLevel());
equals &= (obj.getMaxLevel() == getMaxLevel());
equals &= obj.isSetCompartment() == isSetCompartment();
equals &= obj.isSetConstant() == isSetConstant();
equals &= obj.isSetInitialLevel() == isSetInitialLevel();
equals &= obj.isSetMaxLevel() == isSetMaxLevel();
final int prime = 9115013;
firePropertyChange(QualConstants.compartment, oldCompartment,
firePropertyChange(QualConstants.constant, oldConstant, constant);
firePropertyChange(QualConstants.constant, oldConstant, this.constant);
firePropertyChange(QualConstants.initialLevel, oldInitialLevel,
firePropertyChange(QualConstants.maxLevel, oldMaxLevel, maxLevel);
firePropertyChange(QualConstants.maxLevel, oldMaxLevel, this.maxLevel);
hashCode += prime * getCompartment().hashCode();
hashCode += prime * getInitialLevel();
hashCode += prime * getMaxLevel();
hashCode += prime + (getConstant() ? 1 : -1);
if (!isAttributeRead) {
if ((compartment == null) || (compartment.isEmpty())) {
if (attributeName.equals(QualConstants.compartment)) {
if (compartment != this.compartment) {
if (equals && isSetCompartment()) {
if (equals && isSetConstant()) {
if (equals && isSetInitialLevel()) {
if (equals && isSetMaxLevel()) {
if (equals) {
if (getLevelAndVersion().compareTo(Integer.valueOf(3), Integer.valueOf(1)) < 0) {
if (isSetCompartment()) {
if (isSetConstant()) {
if (isSetInitialLevel()) {
if (isSetMaxLevel()) {
if (model != null) {
if (orig.isSetCompartment()) {
if (orig.isSetConstant()) {
if (orig.isSetInitialLevel()) {
if (orig.isSetMaxLevel()) {
import java.util.Map;
import org.sbml.jsbml.*;
import org.sbml.jsbml.util.*;
import org.sbml.jsbml.util.filters.*;
initDefaults();
initialLevel = null;
initialLevel);
int hashCode = super.hashCode();
isAttributeRead = false;
isAttributeRead = true;
maxLevel + ", id = " + getId() + ", name = " + getName() + "]";
maxLevel = null;
package org.sbml.jsbml.ext.qual;
packageName = QualConstants.shortLabel;
private Boolean constant;
private Integer initialLevel;
private Integer maxLevel;
private String compartment;
private static final long serialVersionUID = 452032495108953L;
public Compartment getCompartmentInstance() {
public QualitativeSpecies clone() {
public QualitativeSpecies() {
public QualitativeSpecies(QualitativeSpecies orig) {
public QualitativeSpecies(String id) {
public QualitativeSpecies(String id, String name, int level, int version) {
public QualitativeSpecies(String id, int level, int version) {
public QualitativeSpecies(int level, int version) {
public String getCompartment() {
public String toString() {
public boolean equals(Object object) {
public boolean getConstant() {
public boolean isCompartmentMandatory() {
public boolean isConstantMandatory() {
public boolean isIdMandatory() {
public boolean isInitialLevelMandatory() {
public boolean isMaxLevelMandatory() {
public boolean isSetCompartment() {
public boolean isSetCompartmentInstance() {
public boolean isSetConstant() {
public boolean isSetInitialLevel() {
public boolean isSetMaxLevel() {
public boolean readAttribute(String attributeName, String prefix, String value) {
public boolean setCompartment(Compartment compartment) {
public boolean setCompartment(String compartment) {
public boolean unsetCompartment() {
public boolean unsetConstant() {
public boolean unsetInitialLevel() {
public boolean unsetMaxLevel() {
public class QualitativeSpecies extends AbstractNamedSBase implements CompartmentalizedSBase, UniqueNamedSBase {
public int getInitialLevel() {
public int getMaxLevel() {
public int hashCode() {
public void initDefaults() {
public void setConstant(boolean constant) {
public void setInitialLevel(int initialLevel) {
public void setMaxLevel(int maxLevel) {
return "QualitativeSpecies [compartment = " + compartment + ", constant = "
return compartment != null;
return constant != null;
return constant.booleanValue();
return equals;
return false;
return getCompartment();
return getCompartmentInstance() != null;
return hashCode;
return initialLevel != null;
return initialLevel.intValue();
return isAttributeRead;
return isSetCompartment() ? compartment : "";
return maxLevel != null;
return maxLevel.intValue();
return model.getCompartment(getCompartment());
return new QualitativeSpecies(this);
return null;
return setCompartment((String) null);
return true;
setCompartment(orig.getCompartment());
setCompartment(value);
setConstant(StringTools.parseSBMLBoolean(value));
setConstant(orig.getConstant());
setInitialLevel(StringTools.parseSBMLInt(value));
setInitialLevel(orig.getInitialLevel());
setMaxLevel(StringTools.parseSBMLInt(value));
setMaxLevel(orig.getMaxLevel());
setPackageVersion(-1);
super();
super(id);
super(id, name, level, version);
super(orig);
this(id, null, level, version);
this(null, null, level, version);
this.compartment = compartment;
this.compartment = null;
this.compartment);
this.constant = constant;
this.initialLevel = initialLevel;
this.initialLevel);
this.maxLevel = maxLevel;
throw new LevelVersionError(getElementName(), level, version);
throw new PropertyUndefinedError(QualConstants.constant, this);
throw new PropertyUndefinedError(QualConstants.initialLevel, this);
throw new PropertyUndefinedError(QualConstants.maxLevel, this);
}
}      else if (attributeName.equals(QualConstants.constant)) {
}      else if (attributeName.equals(QualConstants.initialLevel)) {
}      else if (attributeName.equals(QualConstants.maxLevel)) {
}  }
} else {
