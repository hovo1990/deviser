# Generated by org.mangosdk.spi.processor.SpiProcessor (0.2.4)
# Sat, 9 Jul 2016 11:06:31 +0400
"transitionEffect = " + transitionEffect + ", outputLevel = " + outputLevel
*
* (non-Javadoc)
* ----------------------------------------------------------------------------
* 1. The University of Tuebingen, Germany
* 2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
* 3. The California Institute of Technology, Pasadena, CA, USA
* 4. The University of California, San Diego, La Jolla, CA, USA
* 5. The Babraham Institute, Cambridge, UK
* @author Deviser
* @date $Date: $
* @param id
* @param level
* @param name
* @param orig the Output instance to copy.
* @param outputLevel
* @param qualitativeSpecies
* @param transitionEffect
* @param version
* @return
* @return false
* @return the outputLevel
* @return the qualitativeSpecies
* @return the transitionEffect
* @return {@code true} if the unset of the outputLevel attribute was
* @return {@code true} if the unset of the qualitativeSpecies attribute was
* @return {@code true} if the unset of the transitionEffect attribute was
* @see org.sbml.jsbml.NamedSBase
* @since 1.2
* @version $Rev: 2465 $
* Copyright (C) 2009-2016 jointly by the following organizations:
* Generated serial version identifier.
* This file is part of JSBML. Please visit <http://sbml.org/Software/JSBML>
* This library is free software; you can redistribute it and/or modify it
* and also available online as <http://sbml.org/Software/JSBML/License>.
* for the latest version of JSBML and more information about SBML.
* in the file named "LICENSE.txt" included with this software distribution
* see java.lang.Object
* successful
* the Free Software Foundation. A copy of the license agreement is provided
* under the terms of the GNU Lesser General Public License as published b
*/
+ ", id = " + getId() + ", name = " + getName() + "]";
/*
/* (non-Javadoc)
/* Assignment operator for Output.
/* hashcode method for Output.
/**
@Override
Integer oldOutputLevel = outputLevel;
Integer oldOutputLevel = this.outputLevel;
Model model = getModel();
Output obj = (Output) object;
String oldQualitativeSpecies = this.qualitativeSpecies;
boolean equals = super.equals(object);
boolean isAttributeRead = super.readAttribute(attributeName, prefix, value);
equals &= (obj.getOutputLevel() == getOutputLevel());
equals &= (obj.getQualitativeSpecies() == getQualitativeSpecies());
equals &= (obj.getTransitionEffect() == getTransitionEffect());
equals &= obj.isSetOutputLevel() == isSetOutputLevel();
equals &= obj.isSetQualitativeSpecies() == isSetQualitativeSpecies();
equals &= obj.isSetTransitionEffect() == isSetTransitionEffect();
final int prime = 2157557;
firePropertyChange(QualConstants.outputLevel, oldOutputLevel,
firePropertyChange(QualConstants.qualitativeSpecies,
hashCode += prime * getQualitativeSpecies().hashCode();
hashCode += prime;
if (!isAttributeRead) {
if ((qualitativeSpecies == null) || (qualitativeSpecies.isEmpty())) {
if (TransitionOutputEffect_isValid(transitionEffect) == 0) {
if (attributeName.equals(QualConstants.qualitativeSpecies)) {
if (equals && isSetOutputLevel()) {
if (equals && isSetQualitativeSpecies()) {
if (equals && isSetTransitionEffect()) {
if (equals) {
if (getLevelAndVersion().compareTo(Integer.valueOf(3), Integer.valueOf(1)) < 0) {
if (isSetOutputLevel()) {
if (isSetQualitativeSpecies()) {
if (isSetTransitionEffect()) {
if (model != null) {
if (orig.isSetOutputLevel()) {
if (orig.isSetQualitativeSpecies()) {
if (orig.isSetTransitionEffect()) {
if (qualitativeSpecies != this.qualitativeSpecies) {
import java.util.Map;
import org.sbml.jsbml.*;
import org.sbml.jsbml.util.*;
import org.sbml.jsbml.util.filters.*;
initDefaults();
int hashCode = super.hashCode();
isAttributeRead = false;
isAttributeRead = true;
oldQualitativeSpecies, this.qualitativeSpecies);
outputLevel = null;
outputLevel);
package org.sbml.jsbml.ext.qual;
packageName = QualConstants.shortLabel;
private Integer outputLevel;
private String qualitativeSpecies;
private TransitionOutputEffect transitionEffect;
private static final long serialVersionUID = 48401985443958825L;
public Output clone() {
public Output() {
public Output(Output orig) {
public Output(String id) {
public Output(String id, String name, int level, int version) {
public Output(String id, int level, int version) {
public Output(int level, int version) {
public QualitativeSpecies getQualitativeSpeciesInstance() {
public String getQualitativeSpecies() {
public String toString() {
public TransitionOutputEffect getTransitionEffect() {
public boolean equals(Object object) {
public boolean isIdMandatory() {
public boolean isOutputLevelMandatory() {
public boolean isQualitativeSpeciesMandatory() {
public boolean isSetOutputLevel() {
public boolean isSetQualitativeSpecies() {
public boolean isSetQualitativeSpeciesInstance() {
public boolean isSetTransitionEffect() {
public boolean isTransitionEffectMandatory() {
public boolean readAttribute(String attributeName, String prefix, String value) {
public boolean setQualitativeSpecies(String qualitativeSpecies) {
public boolean unsetOutputLevel() {
public boolean unsetQualitativeSpecies() {
public boolean unsetTransitionEffect() {
public class Output extends AbstractNamedSBase implements UniqueNamedSBase, CallableSBase {
public int getOutputLevel() {
public int hashCode() {
public void initDefaults() {
public void setOutputLevel(int outputLevel) {
public void setTransitionEffect(TransitionOutputEffect transitionEffect) {
qualitativeSpecies = null;
return "Output [qualitativeSpecies = " + qualitativeSpecies + ", "
return (transitionEffect != TRANSITION_OUTPUT_EFFECT_INVALID);
return LIBSBML_INVALID_ATTRIBUTE_VALUE;
return LIBSBML_OPERATION_SUCCESS;
return equals;
return false;
return getQualitativeSpeciesInstance() != null;
return hashCode;
return isAttributeRead;
return isSetQualitativeSpecies() ? qualitativeSpecies : "";
return model.getQualitativeSpecies(getQualitativeSpecies());
return new Output(this);
return null;
return outputLevel != null;
return outputLevel.intValue();
return qualitativeSpecies != null;
return setQualitativeSpecies((String) null);
return transitionEffect;
return true;
setOutputLevel(StringTools.parseSBMLInt(value));
setOutputLevel(orig.getOutputLevel());
setPackageVersion(-1);
setQualitativeSpecies(orig.getQualitativeSpecies());
setQualitativeSpecies(value);
setTransitionEffect(StringTools.parseSBMLTransitionOutputEffect(value));
setTransitionEffect(orig.getTransitionEffect());
super();
super(id);
super(id, name, level, version);
super(orig);
this(id, null, level, version);
this(null, null, level, version);
this.outputLevel = outputLevel;
this.outputLevel);
this.qualitativeSpecies = null;
this.qualitativeSpecies = qualitativeSpecies;
throw new LevelVersionError(getElementName(), level, version);
throw new PropertyUndefinedError(QualConstants.outputLevel, this);
throw new PropertyUndefinedError(QualConstants.transitionEffect, this);
transitionEffect = TRANSITION_OUTPUT_EFFECT_INVALID;
transitionEffect = null;
transitionEffect = transitionEffect;
}
}      else if (attributeName.equals(QualConstants.outputLevel)) {
}      else if (attributeName.equals(QualConstants.transitionEffect)) {
}  }
} else {
